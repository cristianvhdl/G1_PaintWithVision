/******************************************************************
 *   GENERAL STUFF
 ******************************************************************/
// Resolution
#define DISPLAY_COLUMNS  640
#define DISPLAY_ROWS     480

// Frame Buffers
volatile unsigned int * FrameBuffer		= (unsigned int *)0x80000000;
volatile unsigned int * DrawBuffer 		= (unsigned int *)0x80200000;
volatile unsigned int * DisplayBuffer	= (unsigned int *)0x80400000;
volatile unsigned int * ddr_label 		= (unsigned int *)0x80800000;

// Sleep for a number of processor cycles
void sleep(int cycles)
{
	int i;
	for(i=0;i<cycles;i++)
		asm("nop");
}

// LED Detection Variables
int _width = DISPLAY_COLUMNS;
int _height = DISPLAY_ROWS;
int _line_byte_width = 4096;
int _bpp = 4;




/******************************************************************
 *   DISPLAY
 ******************************************************************/
// Display
volatile unsigned int * TFT = (unsigned int *)0x44A10000;

void Display(volatile unsigned int *buffer)
{
	*(TFT)=buffer;
}

// Fill entire 2MB of buffer with colour
void FillBuffer(volatile unsigned int * buffer, int colour)
{
	int i;
	for(i=0;i<(1<<21); i++)
		*(buffer+i)=colour;
}


/******************************************************************
 *    Pixel Filter
 ******************************************************************/
// Addresses
volatile unsigned int * PF_THRESHOLD 	= (unsigned int *)0x44A20000;
volatile unsigned int * PF_X_POS	 	= (unsigned int *)0x44A20004;
volatile unsigned int * PF_Y_POS	 	= (unsigned int *)0x44A20008;
volatile unsigned int * PF_DONE 		= (unsigned int *)0x44A2000C;


/******************************************************************
 *    COMPOSITOR
 ******************************************************************/
// Addresses
volatile unsigned int * COMP_FRAM_BASE 	= (unsigned int *)0x44A00000;
volatile unsigned int * COMP_DRAW_BASE 	= (unsigned int *)0x44A00004;
volatile unsigned int * COMP_DISP_BASE 	= (unsigned int *)0x44A00008;
volatile unsigned int * COMP_READY 		= (unsigned int *)0x44A0000C;
volatile unsigned int * COMP_DONE 		= (unsigned int *)0x44A00010;
volatile unsigned int * COMP_THRESHOLD	= (unsigned int *)0x44A00014;
volatile unsigned int * COMP_XPOS		= (unsigned int *)0x44A00018;
volatile unsigned int * COMP_YPOS		= (unsigned int *)0x44A0001C;

void CompositorInit(volatile unsigned int *Fr, volatile unsigned int *Dr, volatile unsigned int *Dp, unsigned int threshold)
{
	// Set the frame, drawing, display buffers
	*COMP_FRAM_BASE = (unsigned int)Fr;
	*COMP_DRAW_BASE = (unsigned int)Dr;
	*COMP_DISP_BASE = (unsigned int)Dp;
	*COMP_THRESHOLD = threshold;
}

// Signal the compositor to start and wait for it to finish
void CompositorRun()
{
	*COMP_READY = 1;
	*COMP_READY = 0;
	// Wait for finish, otherwise we will see jitter on screen
	// if it is still writing
	while(*COMP_DONE==0);
}
unsigned int CompositorGetXPos()
{
	return *(COMP_XPOS);
}
unsigned int CompositorGetYPos()
{
	return *(COMP_YPOS);
}


/******************************************************************
 *    CAMERA VDMA
 ******************************************************************/
// Camera VDMA
volatile unsigned int * VDMA_BS = (unsigned int *)0x44A20000;
volatile unsigned int * VDMA_CR = (unsigned int *)0x44A20030;
volatile unsigned int * VDMA_SR = (unsigned int *)0x44A20034;
volatile unsigned int * VDMA_AD = (unsigned int *)0x44A200AC;
volatile unsigned int * VDMA_ST = (unsigned int *)0x44A200A8;
volatile unsigned int * VDMA_HS = (unsigned int *)0x44A200A4;
volatile unsigned int * VDMA_VS = (unsigned int *)0x44A200A0;

void VDMAInit(unsigned int * buffer)
{
	*(VDMA_AD) = buffer;
	*(VDMA_ST) = 4096;
	*(VDMA_HS) = 4*DISPLAY_COLUMNS;
}
void VDMAStart()
{
	*(VDMA_CR) = 0x1;
	*(VDMA_VS) = DISPLAY_ROWS;
}
void VDMAStop()
{
	*(VDMA_CR) = 0x0;
}
void VDMAStopAndWait()
{
	VDMAStop();
	// Wait for status bit0 (halt) to be 1;
	while(((*VDMA_SR)&0x1)==0);
}







/******************************************************************
 *    LED DETECTION
 ******************************************************************/
#define VECTOR_INITIAL_CAPACITY 10

struct Blob {
	   int total_x;
	   int total_y;
	   int count;
};

int getAvgX(struct Blob * myblob);
int getAvgY(struct Blob * myblob);

int _B(int i, int j);
int _G(int i, int j);
int _R(int i, int j);
int label_index(int i, int j);
bool isWhitePixel(int i, int j, char * image, int threshold);



// Define a vector type
typedef struct {
  int size;      // slots used so far
  int capacity;  // total available slots
  struct Blob *data;     // array of integers we're storing
} Vector;

void vector_init(Vector *vector);
void vector_append(Vector *vector, struct Blob myblob);
struct Blob vector_get(Vector *vector, int index);
void vector_set(Vector *vector, int index, struct Blob myBlob);
void vector_double_capacity_if_full(Vector *vector);
void vector_free(Vector *vector);
void ProcessFrame(char *image);
void OnePass(Vector * blobList, char *image, int x, int y, int radius);
int Distance(int x1, int y1, int x2, int y2);

void draw_line(char * image, int r, int g, int b, int x1, int y1, int x2, int y2);
void set_color (char * image, int x, int y, int r, int g, int b);
void DrawSqure(int center_x, int center_y, int radius, int thickness, char * image, int R, int G, int B);
void FillColor(int x1, int y1, int x2, int y2, char * image, int R, int G, int B);
int clip_width(int val);
int clip_height(int val);



